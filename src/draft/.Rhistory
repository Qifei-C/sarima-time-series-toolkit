rm(list = ls())
root_dir <- rprojroot::find_rstudio_root_file()
setwd(root_dir)
source("./scripts/rawdata2.R")
source("./scripts/plot.roots.R")
# install.packages(c("xts","zoo","forecast","qpcR","astsa","TSA"))
library(xts)
library(zoo)
sum(is.na(data)) # Check NA values
data$DATE <- as.Date(data$DATE, format="%Y-%m-%d")
data_1985 <- data[data$DATE > as.Date("1985-01-01"), ]
power_ts <- ts(data_1985$IPG2211A2N, start=c(1985, 1), frequency=12)
fit <- lm(power_ts ~ time(power_ts))
ts.plot(power_ts,gpars=list(xlab="Year",ylab="Consumption"))
abline(h=mean(power_ts), col="red")
abline(fit, col="blue", lwd=2)
hist(power_ts, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram before Transformation')
var(power_ts)
library(MASS)
t = 1:length(power_ts)
fit = lm(power_ts ~ t)
bcTransform = boxcox(power_ts ~ t,plotit = TRUE)
lambda = bcTransform$x[which(bcTransform$y == max(bcTransform$y))]
power_ts.bc = (1/lambda)*(power_ts^lambda-1)
hist(power_ts.bc, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Box-Cox Trans')
var(power_ts.bc)
var(power_ts)
power_ts.log <- log(power_ts)
hist(power_ts.log, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Log Trans')
var(power_ts.log)
var(power_ts)
power_ts.sqrt <- sqrt(power_ts)
hist(power_ts.sqrt, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Log Trans')
var(power_ts.sqrt)
plot(power_ts)
plot(power_ts.log)
plot(power_ts.bc)
plot(diff(power_ts.sqrt))
plot(diff(power_ts))
plot(diff(power_ts.log))
plot(diff(power_ts.bc))
plot(diff(power_ts.sqrt))
# Determine the cutting time
ts_start <- start(power_ts)
ts_end <- end(power_ts)
split_point <- c(2020, 1)
# Create the training and testing set
train_set <- window(power_ts.log, start=ts_start, end=split_point)
test_set <- window(power_ts.log, start=split_point + 1, end=ts_end)
# Plotting the training and test sets
plot(train_set, main="Train Time Series", xlab="Time", ylab="Transformed Consumption")
plot(test_set, main="Test Time Series", xlab="Time", ylab="Transformed Consumption")
plot(decompose(train_set)$seasonal)
train_set_diff <- diff(train_set, 1)
train_set_diff2 <- diff(train_set_diff, 12)
acf(train_set, lag.max = 12*3, main = 'ACF of trended Data') # ACF
pacf(train_set, lag.max = 12*3, main = 'PACF of trended Data') # PACF
acf(train_set_diff, lag.max = 12*3, main = 'ACF of trended Data') # ACF
pacf(train_set_diff, lag.max = 12*3, main = 'PACF of trended Data') # PACF
acf(train_set_diff2, lag.max = 12*3, main = 'ACF of De-trended Data') # ACF
pacf(train_set_diff2, lag.max = 12*3, main = 'PACF of De-trended Data') # PACF
var(train_set)
var(train_set_diff)
var(train_set_diff2)
candidates = c("SARIMA(5,1,2)(1,1,2)[12]")
candidate_model <- list()
for (model_name in candidates) {
cat("\nSummary for model:", model_name, "\n")
candidate_model[[model_name]] <- refine_models[[model_name]]
print(summary(refine_models[[model_name]]))
}
refine_models <- list()
library(astsa)
# Model 3: SARIMA(5,1,2)(1,1,2)[12]
# summary(model_saver[['SARIMA(5,1,2)(1,1,2)[12]']])
refine_models[['SARIMA(5,1,2)(1,1,2)[12]']] <- arima(train_set, order=c(5,1,2), seasonal=c(1,1,2), fixed= c(NA, NA, 0, 0, NA, 0, NA, NA, NA, NA), method="ML")
summary(refine_models[['SARIMA(5,1,2)(1,1,2)[12]']])
refine_models[['SARIMA(5,1,2)(1,1,2)[12]']] <- arima(train_set, order=c(5,1,2), seasonal=c(1,1,2), fixed= c(NA, NA, 0, 0, NA, 0, NA, NA, 0, NA), method="ML")
summary(refine_models[['SARIMA(5,1,2)(1,1,2)[12]']])
refine_models[['SARIMA(5,1,2)(1,1,2)[12]']] <- arima(train_set, order=c(5,1,2), seasonal=c(1,1,2), fixed= c(NA, NA, 0, 0, NA, 0, NA, NA, NA, NA), method="ML")
summary(refine_models[['SARIMA(5,1,2)(1,1,2)[12]']])
# model2 finally goes to SARIMA(2,1,2)(2,1,1)[12]
candidates = c("SARIMA(5,1,2)(1,1,2)[12]")
candidate_model <- list()
for (model_name in candidates) {
cat("\nSummary for model:", model_name, "\n")
candidate_model[[model_name]] <- refine_models[[model_name]]
print(summary(refine_models[[model_name]]))
}
candidate1 <- candidate_model[[1]]
#candidate2 <- candidate_model[[2]]
candidate1.res <- residuals(candidate1)
plot.ts(candidate1.res, main = 'SARIMA(5,1,2)(1,1,2)[12]')
abline(h=mean(candidate1.res), col="blue")
hist(candidate1.res, breaks = 40, xlab="", prob=TRUE,
main = 'SARIMA(5,1,2)(1,1,2)[12] Residuals Histogram')
m.candidate1 <- mean(candidate1.res)
std.candidate1 <- sqrt(var(candidate1.res))
curve(dnorm(x,m.candidate1,std.candidate1), add=TRUE )
qqnorm(candidate1.res,main= "Normal Q-Q Plot for SARIMA(5,1,2)(1,1,2)[12]")
qqline(candidate1.res,col="blue")
acf(candidate1.res, lag.max=12*3, main = 'SARIMA(5,1,2)(1,1,2)[12] Residuals')
pacf(candidate1.res, lag.max=12*3, main = 'SARIMA(5,1,2)(1,1,2)[12] Residuals')
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 7)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 7)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
View(refine_models)
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 4)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 4)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 7)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 7)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 7)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 7)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 7)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 7)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
shapiro.test(candidate1.res)
Box.test(candidate1.res, type=c("Box-Pierce"), lag = 20, fitdf = 7)
Box.test(candidate1.res, type=c("Ljung-Box"), lag = 20, fitdf = 7)
Box.test((candidate1.res)^2, type=c("Ljung-Box"), lag = 20, fitdf = 0)
ar(candidate1.res, aic = TRUE, order.max = NULL, method = c("yule-walker"))
View(candidate1)
library(forecast)
library(qpcR)
install.packages(c("xts","zoo","forecast","qpcR","astsa","TSA"))
library(xts)
library(zoo)
install.packages(c("xts", "zoo", "forecast", "qpcR", "astsa", "TSA"))
rm(list = ls())
root_dir <- rprojroot::find_rstudio_root_file()
setwd(root_dir)
source("./scripts/rawdata2.R")
source("./scripts/plot.roots.R")
install.packages(c("xts","zoo","forecast","qpcR","astsa","TSA"))
library(xts)
library(zoo)
sum(is.na(data)) # Check NA values
data$DATE <- as.Date(data$DATE, format="%Y-%m-%d")
data_1985 <- data[data$DATE > as.Date("1985-01-01"), ]
power_ts <- ts(data_1985$IPG2211A2N, start=c(1985, 1), frequency=12)
fit <- lm(power_ts ~ time(power_ts))
ts.plot(power_ts,gpars=list(xlab="Year",ylab="Consumption"))
abline(h=mean(power_ts), col="red")
abline(fit, col="blue", lwd=2)
hist(power_ts, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram before Transformation')
var(power_ts)
library(MASS)
t = 1:length(power_ts)
fit = lm(power_ts ~ t)
bcTransform = boxcox(power_ts ~ t,plotit = TRUE)
lambda = bcTransform$x[which(bcTransform$y == max(bcTransform$y))]
power_ts.bc = (1/lambda)*(power_ts^lambda-1)
hist(power_ts.bc, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Box-Cox Trans')
var(power_ts.bc)
var(power_ts)
power_ts.log <- log(power_ts)
hist(power_ts.log, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Log Trans')
var(power_ts.log)
var(power_ts)
power_ts.sqrt <- sqrt(power_ts)
hist(power_ts.sqrt, breaks = 40, xlab="", prob=TRUE,
main = 'Time Series Histogram after Log Trans')
var(power_ts.sqrt)
plot(power_ts)
plot(power_ts.log)
plot(power_ts.bc)
plot(diff(power_ts.sqrt))
plot(diff(power_ts))
plot(diff(power_ts.log))
plot(diff(power_ts.bc))
plot(diff(power_ts.sqrt))
# Determine the cutting time
ts_start <- start(power_ts)
ts_end <- end(power_ts)
split_point <- c(2020, 1)
# Create the training and testing set
train_set <- window(power_ts.log, start=ts_start, end=split_point)
test_set <- window(power_ts.log, start=split_point + 1, end=ts_end)
# Plotting the training and test sets
plot(train_set, main="Train Time Series", xlab="Time", ylab="Transformed Consumption")
plot(test_set, main="Test Time Series", xlab="Time", ylab="Transformed Consumption")
plot(decompose(train_set)$seasonal)
train_set_diff <- diff(train_set, 1)
train_set_diff2 <- diff(train_set_diff, 12)
acf(train_set, lag.max = 12*3, main = 'ACF of trended Data') # ACF
pacf(train_set, lag.max = 12*3, main = 'PACF of trended Data') # PACF
acf(train_set_diff, lag.max = 12*3, main = 'ACF of trended Data') # ACF
pacf(train_set_diff, lag.max = 12*3, main = 'PACF of trended Data') # PACF
acf(train_set_diff2, lag.max = 12*3, main = 'ACF of De-trended Data') # ACF
pacf(train_set_diff2, lag.max = 12*3, main = 'PACF of De-trended Data') # PACF
var(train_set)
var(train_set_diff)
var(train_set_diff2)
# Compute ACF and PACF
acf_values <- acf(train_set_diff2, lag.max = 12*3, plot = FALSE)
pacf_values <- pacf(train_set_diff2, lag.max = 12*3, plot = FALSE)
# Determine the significance level (95% confidence)
n <- length(train_set_diff2)
conf_level <- qnorm((1 + 0.95)/2) / sqrt(n)
# Find significant lags for ACF
significant_acf_lags <- which(abs(acf_values$acf) > conf_level)
# Find significant lags for PACF
significant_pacf_lags <- which(abs(pacf_values$acf) > conf_level)
# Output the lags
cat("Significant ACF lags at 95% confidence: ", significant_acf_lags, "\n")
cat("Significant PACF lags at 95% confidence: ", significant_pacf_lags, "\n")
library(forecast)
library(qpcR)
R CMD INSTALL --with-libpng-prefix=/usr/X11/lib/ rgl
qpcR
install.packages(c("xts","zoo","forecast","qpcR","astsa","TSA"))
library(xts)
library(zoo)
install.packages(c("xts", "zoo", "forecast", "qpcR", "astsa", "TSA"))
install.packages("qpcR")
library(forecast)
library(qpcR)
library(rgl)
install.packages("rgl")
library(qpcR)
library(forecast)
# Initialize an empty list to store AICc values and model specifications
aiccs <- list()
model_saver <- list()
# Given values
p_vals <- c(1,2,4,5)
q_vals <- c(0,1,2,3)
P_vals <- c(0,1)
Q_vals <- c(1,2)
d_val <- 1
D_val <- 1
s_val <- 12
# Loop over the candidate variables for p, q, P, Q
for(p in p_vals) {
for(P in P_vals) {
for(q in q_vals) {
for(Q in Q_vals) {
# Fit the SARIMA model with the given parameters
model <- Arima(train_set, order=c(p, d_val, q), seasonal=c(P, D_val, Q), method="ML")
model_name <- paste("SARIMA(", p, ",", d_val, ",", q, ")(", P, ",", D_val, ",", Q, ")[", s_val, "]", sep="")
model_saver[[model_name]] <- model
# Calculate the AICc and store in the list with the corresponding model specifications
aiccs[[model_name]] <- AICc(model)
}
}
}
}
